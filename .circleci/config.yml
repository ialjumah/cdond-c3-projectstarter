version: 2.1
orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflowId:
            type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rb s3://udapeople-${ID}
            aws cloudformation delete-stack  --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack  --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
          key: backend-build
          
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # store result in SUCCESS if there was a successful migration associated with the workflow id
            SUCCESS=`curl -H "token: 76f9514c-4cdd-4658-88f9-d7a705af6604" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}`
            echo $SUCCESS
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert #revert the successful migration
            fi 
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
              cd backend
              npm install
              npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
    - checkout
    - restore_cache:
        keys: [frontend-build]
    - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install            
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      # Docker image here
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here 
    - checkout
    - restore_cache:
        keys: [backend-build]
    - run:
        name: Build back-end
        command: |
          # Your code here
          cd backend
          npm install 
          npm audit fix --audit-level=critical --force
          npm audit fix --audit-level=critical  

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      


  configure-infrastructure:
      docker:
        # Docker image here that supports Ansible
        - image: python:3.7-alpine3.11
      steps:
        # Checkout code from git
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints: 
              - "01:71:48:e7:02:c3:28:6c:36:0e:ce:06:31:fe:52:2a"
        
          
        # attach workspace
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              # Your code here
              apk add --update tar gzip ansible curl
              pip install awscli
        
              
        - run:
            name: Configure server
            working_directory: ~/project/.circleci/ansible

            command: |
              # Your code here
              # echo NODE_ENV=production > "~/project/.circleci/~/project/.circleci/backend/.env"
              # echo ENVIRONMENT=production >> "~/project/.circleci/backend/.env"
              # echo VERSION=1 >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_HOST=1 >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_PORT=$TYPEORM_PORT >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "~/project/.circleci/backend/.env"
              # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "~/project/.circleci/backend/.env"
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i inventory.txt  configure-server.yml
                
        - destroy-environment:
            workflowId: ${CIRCLE_WORKFLOW_ID:0:7}   

             # cd .circleci/ansible
              #ansible-playbook -i inventory.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
              sudo apt-get update && sudo apt-get install -yy less
              sudo apt-get install unzip -y
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              
        # - run:
        #     name: Install dependencies
        #     command: |
        #       curl -sL https://rpm.nodesource.com/setup_12.x | bash -
        #     d  yum -y install nodejs npm tar gzip jq git 
      - run:
          #npm run migrations:revert
          name: Run migrations
          no_output_timeout: 20m
          working_directory: ./backend
          command: |
              npm i
              sudo npm install pm2 -g
              echo ENVIRONMENT=production > ".env"
              echo TYPEORM_CONNECTION=postgres >> ".env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
              npm run migrations > migration.log
              cat migration.log
              migration_succesful=$(cat migration.log | grep -c "has been executed successfully")
              if [ $migration_succesful > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
              curl -H "Content-Type: text/plain" \
              -H "token: 76f9514c-4cdd-4658-88f9-d7a705af6604" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure
      # - run:
      #     name: Revert migrations
      #     when: on_fail
      - revert-migrations
      - destroy-environment: 
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  # Docker image here that supports AWS CLI
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - attach_workspace:
          at: ~/
      - run:
          name: Install  AWS CLI dependencies
          #working_directory: /temp
          command: |
            # your code here
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip, tar -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
      - run: apt-get install tar gzip
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
            

       

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      - scan-backend:
         requires: [build-backend]
      - scan-frontend:
         requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
     # - run-migrations:
        #  requires: [configure-infrastructure]
      - deploy-frontend:
          #requires: [run-migrations]
          requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]