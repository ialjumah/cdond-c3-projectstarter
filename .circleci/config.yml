version: 2.1
orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      workflowId: 
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rb s3://udapeople-<<parameters.workflowId>>
            aws cloudformation delete-stack  --stack-name udapeople-backend-<<parameters.workflowId>>
            aws cloudformation delete-stack  --stack-name udapeople-frontend-<<parameters.workflowId>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
          key: backend-build
          
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # store result in SUCCESS if there was a successful migration associated with the workflow id
            SUCCESS=`curl -H "token: 76f9514c-4cdd-4658-88f9-d7a705af6604" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}`
            echo $SUCCESS
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert #revert the successful migration
            fi 
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end/
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend
            #- project/frontend/package.json


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
              cd backend
              npm install
              npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
      - persist_to_workspace:
            root: ~/
            paths:
              - project/backend/dist
              - project/backend/node_modules


  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
    - checkout
    - restore_cache:
        keys: [frontend-build]
    - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install            
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      # Docker image here
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here 
    - checkout
    - restore_cache:
        keys: [backend-build]
    - run:
        name: Build back-end
        command: |
          # Your code here
          cd backend
          npm install 
          npm audit fix --audit-level=critical --force
          npm audit fix --audit-level=critical  

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            #--query 'Reservations[*].Instances[*].PublicIpAddress' \
            #--filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #--output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
            # --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --output text)
            #aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=backend-7af54af" --output text
            #aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-7af54af" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      


  configure-infrastructure:
      docker:
        # Docker image here that supports Ansible
        - image: python:3.7-alpine3.11
      steps:
        # Checkout code from git
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints: 
              - "01:71:48:e7:02:c3:28:6c:36:0e:ce:06:31:fe:52:2a"
        
          
        # attach workspace
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              # Your code here
              apk add --update tar gzip ansible curl
              pip install awscli
        
              
        - run:
            name: Configure server
            # working_directory: ~/project/.circleci/ansible do not use it

            command: |
              #Your code here
              touch ~/project/backend/.env
              echo NODE_ENV=production > "backend/.env"
              echo ENVIRONMENT=production >> "backend/.env"
              echo VERSION=1 >> "backend/.env"
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >>"backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_HOST=1 >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              cd .circleci/ansible
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook -i inventory.txt  configure-server.yml
                
        - destroy-environment:
            workflowId: ${CIRCLE_WORKFLOW_ID:0:7}   

             # cd .circleci/ansible
              #ansible-playbook -i inventory.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
              sudo apt-get update && sudo apt-get install -yy less
              sudo apt-get install unzip -y
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              
        # - run:
        #     name: Install dependencies
        #     command: |
        #       curl -sL https://rpm.nodesource.com/setup_12.x | bash -
        #     d  yum -y install nodejs npm tar gzip jq git 
      - run:
          name: Run migrations
          no_output_timeout: 20m
          working_directory: ./backend
          command: |
              #npm i
              # sudo npm install pm2 -g
              # echo ENVIRONMENT=production > ".env"
              # echo TYPEORM_CONNECTION=postgres >> ".env"
              # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
              # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
              # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
              # echo NODE_ENV=production >> ".env"
              # echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              # echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
              npm run migrations:revert
              npm run migrations > migration.log
              cat migration.log
              migration_succesful=$(cat migration.log | grep -c "has been executed successfully")
              if [ $migration_succesful > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
              curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure
      # - run:
      #     name: Revert migrations
      #     when: on_fail
      - revert-migrations
      - destroy-environment: 
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  # Docker image here that supports AWS CLI
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install  AWS CLI dependencies
          #working_directory: /temp
          command: |
            # your code here
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install


      #- run: apt-get install tar gzip
      # - run:
      #     name: Install dependencies
      #     working_directory: ~/project/.circleci/frontend
      #     command: |
      #       #cd frontend
      #       #npm i
      #       #npm run build

      

      - run:
          name: Build the frontend
          working_directory: ~/project/frontend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL=${API_URL}
            pwd
            ls
            #cd frontend
            npm install
            npm run build
            #tar -czvf 
            #artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: Deploy frontend objects to S3
          working_directory: ~/project/frontend
          command: |
            # your code here
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # - run:
      #     name: Add tar
      #     command: yum install -y tar
      - destroy-environment: 
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-backend: 
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout    
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["8d:2a:24:bc:9d:3f:a4:0b:51:09:bd:9d:e0:53:25:57"]

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |  
            pip install --upgrade pip
            pip install awscli
            apk add --update nodejs npm ansible zip
      
            # your code here
      - run:
          name: Deploy backend
          command: |
              cd backend
              apk add --update nodejs-npm
              apk add --update npm
              npm install
              npm run build
              echo build successful
      - run:
          name: Configure server
          command: |
              echo ENVIROMENT=production > "backend/dist/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/dist/.env"
              echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> "backend/dist/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/dist/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/dist/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/dist/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/dist/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/dist/.env"
          
      - run:
          name: Configure server
          command: |    
              cd /root/project/backend/dist
              tar czf dist.tar.gz .
              mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
              mv dist.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
              cd /root/project/backend/node_modules
              tar czf node_modules.tar.gz .
              mv node_modules.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
              pwd
              cd /root/project/.circleci/ansible
              ansible-playbook deploy-backend.yml -i inventory.txt 
            
  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["01:71:48:e7:02:c3:28:6c:36:0e:ce:06:31:fe:52:2a"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible curl tar gzip zip unzip openssh-client nodejs npm
  #           pip install awscli
  #     - run:
  #         name: Deploy backend
  #         no_output_timeout: 20m
  #         command: |
  #             cd backend
  #             echo ENVIROMENT=$ENVIROMENT > ".env"
  #             echo NODE_ENV=$ENVIROMENT > ".env"
  #             echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
  #             echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
  #             echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
  #             echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
  #             echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
  #             echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
  #             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
  #             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
  #             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

  #             #cat backend/.env changed this line forthe below 
  #             cat .env

  #             #tar -C backend -czvf artifact.tar.gz 
  #             ls -la
  #             npm i
  #             npm run build
  #             cd dist
  #             cp ../package.json .
  #             zip -rq dist.zip .
  #             mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
  #             mv dist.zip ~/project/.circleci/ansible/roles/deploy/files/
  #             ls ~/project/.circleci/ansible/roles/deploy/files/
  #             pwd
  #             cd ~/project/.circleci/ansible
  #             cat inventory.txt
  #             export ANSIBLE_HOST_KEY_CHECKING=False
  #             ansible-playbook -i inventory.txt deploy-backend.yml -vv
    
  #             # cd ../
  #             # zip -r backend.zip backend/
  #             # cat .circleci/ansible/inventory.txt
  #             # export ANSIBLE_HOST_KEY_CHECKING=False
  #             # ansible-playbook -i  .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml --extra-vars="TYPEORM_HOST=$TYPEORM_HOST TYPEORM_PORT=$TYPEORM_PORT TYPEORM_USERNAME=$TYPEORM_USERNAME  TYPEORM_PASSWORD=$TYPEORM_PASSWORD TYPEORM_DATABASE=$TYPEORM_DATABASE"
        
   #     - destroy-environment:
   #         workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
    #    - revert-migrations
  

    
 

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: circleci/node:13.8.0  #python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here            
            #pip install awscli
            sudo apt update #apk add --update curl nodejs npm
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1  \
                --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[].Instances[*].PublicIpAddress" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl -s "${API_URL}/api/status"
            if curl   "${API_URL}/api/status" | grep "ok"
            then
               return 0
            else
               return 1
            fi
            
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

    # - run:
    #       name: Frontend smoke test.
    #       command: |
    #         URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:6}.s3-website-us-east-1.amazonaws.com"
    #         if curl -s ${URL} | grep "Welcome"
    #         then
    #           return 0
    #         else
    #           return 1
    #         fi
    #         sleep 20
      
    #   - revert-migrations
    #   - destroy-environment
         
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend]
      - scan-backend:
         requires: [build-backend]
      - scan-frontend:
         requires: [build-frontend]
      - deploy-infrastructure:
         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
         # requires: [configure-infrastructure] do not use it
      - deploy-backend:
          requires: [run-migrations] 
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
           
      # # - cloudfront-update:
      # #     requires: [smoke-test]
      #     filters:
      #         branches:
      #           only: [master]
      # # - cleanup:
      # #     requires: [cloudfront-update] 
      #     filters:
      #         branches:
      #           only: [master]